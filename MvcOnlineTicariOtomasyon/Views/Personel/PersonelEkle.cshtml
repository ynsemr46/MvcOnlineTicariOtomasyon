@model MvcOnlineTicariOtomasyon.Models.Siniflar.Personel
@{
    ViewBag.Title = "Personel Ekle";
    Layout = "~/Views/Shared/AdminLayout.cshtml";
}
<style>




    .container {
        max-width: 800px;
        margin: 0 auto;
        margin-top: 100px;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        padding: 30px;
        margin-bottom: 30px;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .form-header {
        text-align: center;
        margin-bottom: 30px;
        position: relative;
    }

        .form-header::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 3px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            border-radius: 2px;
        }

    .form-title {
        font-size: 2.2rem;
        color: #2c3e50;
        font-weight: 700;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 15px;
    }

        .form-title i {
            color: #667eea;
            font-size: 2rem;
        }

    .form-subtitle {
        color: #7f8c8d;
        font-size: 1.1rem;
        font-weight: 400;
    }

    .form-group {
        margin-bottom: 25px;
        position: relative;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #2c3e50;
        font-size: 0.95rem;
        transition: color 0.3s ease;
    }



    .input-group {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 15px;
    }

        .input-group .form-control {
            flex: 1;
        }

    .btn {
        padding: 15px 30px;
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 10px;
        position: relative;
        overflow: hidden;
    }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

    .btn-warning {
        background: linear-gradient(135deg, #f39c12 0%, #f1c40f 100%);
        color: white;
    }

        .btn-warning:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(243, 156, 18, 0.3);
        }

    .btn-info {
        background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
        color: white;
    }

        .btn-info:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(52, 152, 219, 0.3);
        }

    .btn-success {
        background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
        color: white;
    }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(46, 204, 113, 0.3);
        }

    .btn-danger {
        background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
        color: white;
        padding: 10px 15px;
        font-size: 0.9rem;
    }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(231, 76, 60, 0.3);
        }

    .text-center {
        text-align: center;
    }

    .text-danger {
        color: #e74c3c;
        font-size: 0.85rem;
        margin-top: 5px;
        display: block;
    }

    .text-muted {
        color: #7f8c8d;
        font-size: 0.85rem;
        margin-top: 5px;
    }

    .alert {
        padding: 15px 20px;
        border-radius: 12px;
        margin-bottom: 20px;
        border: none;
        font-weight: 500;
    }

    .alert-danger {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
        color: white;
    }

  

    input[type="file"] {
        padding: 12px;
    }

    .form-section {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 12px;
        margin: 20px 0;
        border-left: 4px solid #667eea;
    }

    .form-section-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .password-toggle {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        color: #7f8c8d;
        font-size: 1.1rem;
    }

        .password-toggle:hover {
            color: #667eea;
        }
</style>

<!-- Personel Ekle Formu -->
<div id="personel-ekle" class="form-page">
    <div class="container">
        <div class="form-header">
            <h2 class="form-title">
                <i class="fas fa-users"></i> Yeni Personel Ekle
            </h2>
            <p class="form-subtitle">Sisteme yeni bir personel ekleyin</p>
        </div>

        <div class="form-content">
            <form action="PersonelEkle" method="post" enctype="multipart/form-data" id="personelEkleForm">
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-user"></i> Personel Adı
                    </label>
                    <input type="text" name="PersonelAd" class="form-control"
                           placeholder="Personel adını girin" required
                           pattern="[a-zA-ZçÇğĞıİöÖşŞüÜ ]+"
                           title="Sadece harf ve boşluk kullanılabilir.">
                    <span class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-user"></i> Personel Soyadı
                    </label>
                    <input type="text" name="PersonelSoyad" class="form-control"
                           placeholder="Personel soyadını girin" required
                           pattern="[a-zA-ZçÇğĞıİöÖşŞüÜ ]+"
                           title="Sadece harf ve boşluk kullanılabilir.">
                    <span class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-user-circle"></i> Kullanıcı Adı
                    </label>
                    <input type="text" name="KullaniciAd" class="form-control"
                           placeholder="Kullanıcı adını girin" required
                           pattern="[a-zA-Z0-9]+"
                           title="Kullanıcı adı sadece harf ve rakam içerebilir.">
                    <span class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-lock"></i> Şifre
                    </label>
                    <input type="password" name="Sifre" class="form-control"
                           placeholder="Şifre girin" required minlength="6">
                    <span class="text-danger"></span>
                    <div class="help-text">Şifre en az 6 karakter olmalıdır.</div>
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-image"></i> Profil Görseli
                    </label>
                    <input type="file" name="PersonelGorsel" class="form-control"
                           accept="image/*" onchange="validateFile(this)">
                    <span class="text-danger"></span>
                    <div class="help-text">Maksimum 2MB, sadece JPEG, PNG, GIF formatları kabul edilir.</div>
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-building"></i> Departman
                    </label>
                    @Html.DropDownListFor(x => x.DepartmanId, (List<SelectListItem>)ViewBag.dgr1, "Departman Seçiniz", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.DepartmanId, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-user-shield"></i> Yetki
                    </label>
                    @Html.DropDownListFor(x => x.Yetki, new List<SelectListItem>
                    {
                        new SelectListItem { Text = "Personel", Value = "P", Selected = true },
                        new SelectListItem { Text = "Admin", Value = "A" }
                    }, "Yetki Seçiniz", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.Yetki, "", new { @class = "text-danger" })
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Kaydet
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        function showForm(formId) {
            // Hide all forms
            document.querySelectorAll('.form-page').forEach(form => {
                form.classList.add('hidden');
            });

            // Show selected form
            document.getElementById(formId).classList.remove('hidden');

            // Update tab buttons
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.closest('.tab-btn').classList.add('active');
        }

        function togglePassword() {
            var sifreInput = document.getElementById("sifreInput");
            var showPassword = document.getElementById("showPassword");
            if (showPassword.checked) {
                sifreInput.type = "text";
                sifreInput.value = "123456"; // Example existing password
            } else {
                sifreInput.type = "password";
                sifreInput.value = "";
            }
        }

        function validateFile(input) {
            const maxSize = 2 * 1024 * 1024; // 2MB
            const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];

            if (input.files[0]) {
                if (!allowedTypes.includes(input.files[0].type)) {
                    alert("Sadece JPEG, PNG veya GIF dosyaları yüklenebilir!");
                    input.value = "";
                    return false;
                }

                if (input.files[0].size > maxSize) {
                    alert("Dosya boyutu 2MB'dan büyük olamaz!");
                    input.value = "";
                    return false;
                }

                // Preview image
                const reader = new FileReader();
                reader.onload = function (e) {
                    const preview = input.parentElement.querySelector('.image-preview');
                    if (preview) {
                        preview.src = e.target.result;
                    }
                };
                reader.readAsDataURL(input.files[0]);
            }

            return true;
        }

        // Form validation
        document.addEventListener('DOMContentLoaded', function () {
            const forms = document.querySelectorAll('form');

            forms.forEach(form => {
                form.addEventListener('submit', function (e) {
                    let isValid = true;
                    const inputs = form.querySelectorAll('input[required], select[required]');

                    inputs.forEach(input => {
                        const errorSpan = input.parentElement.querySelector('.text-danger');

                        if (!input.value.trim()) {
                            errorSpan.textContent = 'Bu alan zorunludur.';
                            isValid = false;
                        } else {
                            errorSpan.textContent = '';
                        }

                        // Additional validation for specific fields
                        if (input.name === 'PersonelAd' || input.name === 'PersonelSoyad') {
                            const namePattern = /^[a-zA-ZçÇğĞıİöÖşŞüÜ ]+$/;
                            if (!namePattern.test(input.value)) {
                                errorSpan.textContent = 'Sadece harf ve boşluk kullanılabilir.';
                                isValid = false;
                            }
                        }

                        if (input.name === 'KullaniciAd') {
                            const usernamePattern = /^[a-zA-Z0-9]+$/;
                            if (!usernamePattern.test(input.value)) {
                                errorSpan.textContent = 'Sadece harf ve rakam kullanılabilir.';
                                isValid = false;
                            }
                        }

                        if (input.name === 'Sifre' && input.value && input.value.length < 6) {
                            errorSpan.textContent = 'Şifre en az 6 karakter olmalıdır.';
                            isValid = false;
                        }
                    });

                    if (!isValid) {
                        e.preventDefault();
                    }
                });
            });
        });

        // Add smooth animations
        document.querySelectorAll('.form-control').forEach(input => {
            input.addEventListener('focus', function () {
                this.parentElement.classList.add('focused');
            });

            input.addEventListener('blur', function () {
                this.parentElement.classList.remove('focused');
            });
        });
    </script>
}