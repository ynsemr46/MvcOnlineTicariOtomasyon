
@model MvcOnlineTicariOtomasyon.Models.Siniflar.Personel
@{
    ViewBag.Title = "Personel Güncelle";
    Layout = "~/Views/Shared/AdminLayout.cshtml";
}
<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        margin-top: 100px;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        padding: 30px;
        margin-bottom: 30px;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .form-header {
        text-align: center;
        margin-bottom: 30px;
        position: relative;
    }

        .form-header::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 3px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            border-radius: 2px;
        }

    .form-title {
        font-size: 2.2rem;
        color: #2c3e50;
        font-weight: 700;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 15px;
    }

        .form-title i {
            color: #667eea;
            font-size: 2rem;
        }

    .form-subtitle {
        color: #7f8c8d;
        font-size: 1.1rem;
        font-weight: 400;
    }

    .form-group {
        margin-bottom: 25px;
        position: relative;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #2c3e50;
        font-size: 0.95rem;
        transition: color 0.3s ease;
    }

    .input-group {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 15px;
    }

        .input-group .form-control {
            flex: 1;
        }

    .btn {
        padding: 15px 30px;
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 10px;
        position: relative;
        overflow: hidden;
    }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

    .btn-warning {
        background: linear-gradient(135deg, #f39c12 0%, #f1c40f 100%);
        color: white;
    }

        .btn-warning:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(243, 156, 18, 0.3);
        }

    .btn-info {
        background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
        color: white;
    }

        .btn-info:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(52, 152, 219, 0.3);
        }

    .btn-success {
        background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
        color: white;
    }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(46, 204, 113, 0.3);
        }

    .btn-danger {
        background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
        color: white;
        padding: 10px 15px;
        font-size: 0.9rem;
    }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(231, 76, 60, 0.3);
        }

    .text-center {
        text-align: center;
    }

    .text-danger {
        color: #e74c3c;
        font-size: 0.85rem;
        margin-top: 5px;
        display: block;
    }

    .text-muted {
        color: #7f8c8d;
        font-size: 0.85rem;
        margin-top: 5px;
    }

    .alert {
        padding: 15px 20px;
        border-radius: 12px;
        margin-bottom: 20px;
        border: none;
        font-weight: 500;
    }

    .alert-danger {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
        color: white;
    }

    input[type="file"] {
        padding: 12px;
    }

    .form-section {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 12px;
        margin: 20px 0;
        border-left: 4px solid #667eea;
    }

    .form-section-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .password-toggle {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        color: #7f8c8d;
        font-size: 1.1rem;
    }

        .password-toggle:hover {
            color: #667eea;
        }
</style>
<div id="personel-guncelle" class="form-page">
    <div class="container">
        <div class="form-header">
            <h2 class="form-title">
                <i class="fas fa-user-edit"></i> @((Session["UserType"]?.ToString() == "Personel") ? "Profil Güncelle" : "Personel Güncelle")
            </h2>
            <p class="form-subtitle">@((Session["UserType"]?.ToString() == "Personel") ? "Kendi profil bilgilerinizi güncelleyin" : "Mevcut personel bilgilerini güncelleyin")</p>
        </div>
        @using (Html.BeginForm((Session["UserType"]?.ToString() == "Personel") ? "KendiProfilGuncelle" : "PersonelGuncelle", "Personel", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.HiddenFor(x => x.PersonelId)
            <div class="form-group">
                @Html.LabelFor(x => x.PersonelAd, "Personel Adı")
                @Html.TextBoxFor(x => x.PersonelAd, new { @class = "form-control", placeholder = "Personel adı giriniz", required = "required", pattern = "[a-zA-ZçÇğĞıİöÖşŞüÜ ]+", title = "Sadece harf ve boşluk kullanılabilir." })
                @Html.ValidationMessageFor(x => x.PersonelAd, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.PersonelSoyad, "Personel Soyadı")
                @Html.TextBoxFor(x => x.PersonelSoyad, new { @class = "form-control", placeholder = "Personel soyadı giriniz", required = "required", pattern = "[a-zA-ZçÇğĞıİöÖşŞüÜ ]+", title = "Sadece harf ve boşluk kullanılabilir." })
                @Html.ValidationMessageFor(x => x.PersonelSoyad, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.KullaniciAd, "Kullanıcı Adı")
                @Html.TextBoxFor(x => x.KullaniciAd, new { @class = "form-control", placeholder = "Kullanıcı adı giriniz", required = "required", pattern = "[a-zA-Z0-9]+", title = "Kullanıcı adı sadece harf ve rakam içerebilir." })
                @Html.ValidationMessageFor(x => x.KullaniciAd, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Sifre, "Şifre")
                <div class="input-group">
                    @Html.PasswordFor(x => x.Sifre, new { @class = "form-control", placeholder = "Şifre giriniz", maxlength = "100", minlength = "6", id = "sifreInput" })
                    <div class="input-group-append">
                        <div class="input-group-text">
                            <input type="checkbox" id="showPassword" onclick="togglePassword()" />
                            <label for="showPassword" class="ml-1">Şifreyi Göster</label>
                        </div>
                    </div>
                </div>
                @Html.ValidationMessageFor(x => x.Sifre, "", new { @class = "text-danger" })
                <small class="text-muted">Şifreyi değiştirmek istemiyorsanız boşken güncelle butonuna basmayın.</small>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.PersonelGorsel, "Görsel")
                <input type="file" name="PersonelGorsel" class="form-control" accept="image/*" onchange="validateFile(this)" />
                @if (!string.IsNullOrEmpty(Model.PersonelGorsel))
                {
                    <img src="@Model.PersonelGorsel" alt="Mevcut Görsel" style="max-width: 100px; margin-top: 10px;" />
                }
                @Html.ValidationMessageFor(x => x.PersonelGorsel, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.DepartmanId, "Departman")
                @Html.DropDownListFor(x => x.DepartmanId, (List<SelectListItem>)ViewBag.dgr1, "Departman Seçiniz", new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(x => x.DepartmanId, "", new { @class = "text-danger" })
            </div>
            if (Session["UserType"]?.ToString() == "Admin")
            {
                <div class="form-group">
                    @Html.LabelFor(x => x.Yetki, "Yetki")
                    @Html.DropDownListFor(x => x.Yetki, new List<SelectListItem>
                    {
                        new SelectListItem { Text = "Personel", Value = "P" },
                        new SelectListItem { Text = "Admin", Value = "A" }
                    }, "Yetki Seçiniz", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(x => x.Yetki, "", new { @class = "text-danger" })
                </div>
            }
            else
            {
                @Html.HiddenFor(x => x.Yetki)
            }
            <div class="text-center">
                <button type="submit" class="btn btn-warning">Güncelle</button>
            </div>
        }
    </div>
</div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        <script>
        function togglePassword() {
            var sifreInput = document.getElementById("sifreInput");
            var showPassword = document.getElementById("showPassword");
            if (showPassword.checked) {
                sifreInput.type = "text";
                sifreInput.value = '@Model.Sifre';
            } else {
                sifreInput.type = "password";
                sifreInput.value = "";
            }
        }

        function validateFile(input) {
            const maxSize = 2 * 1024 * 1024; // 2MB
            const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
            if (input.files[0]) {
                if (!allowedTypes.includes(input.files[0].type)) {
                    alert("Sadece JPEG, PNG veya GIF dosyaları yüklenebilir!");
                    input.value = "";
                } else if (input.files[0].size > maxSize) {
                    alert("Dosya boyutu 2MB'dan büyük olamaz!");
                    input.value = "";
                }
            }
        }
        </script>
    }
    

